редактор кода
интерпретатор
литералы
переменные
условия 
объекты

  наименования интерпретатора
  оператор иницализации
  литералы числого типа
6 типов данных являющихся примитивами:
1.Undefined (Неопределённый тип)  : typeof instance === "undefined"
2.Boolean (Булев, Логический тип) : typeof instance === "boolean"
3.Number (Число) : typeof instance === "number"
4.String (Строка) : typeof instance === "string"
5.BigInt  : typeof instance === "bigint"
6. Symbol (в ECMAScript 6)  : typeof instance === "symbol"
else if
else 
if эта условия

&& = и
|| = или 
!  не
!= не равен
!== строгово неравенство
= присваивание
== равно
===
AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )

prompt поле
confirm потверждение
alert внимание
let позволять
const
 userName  
userAge
isTrue
True
typeof
[]Синтаксис создания инициализатора/литерала массива.
{}Синтаксис создания инициализатора/литерала объекта
( )Оператор группировки.

% (en-US)Оператор взятия остатка от деления.
операнты математических значение + - / * >< == != 
Декремент -- ;counter-- true; 5-- fals
Инкремент ++

n *= 3 + 5;(16)
let n = 2; n += 5; // теперь n = 7 (работает как n = n + 5) n *= 2; // теперь n = 14 (работает как n = n * 2  alert( n ); // 14

for (начало; условие; шаг) {  // ... тело цикла ...}

let a = (1 + 2, 3 + 4) alert( a ); // 7 (результат вычисления 3 + 4)
a = 1 + 2, 3 + 4 //a = 3

function имя(параметры) {  ...тело...}


for (let i = 0; i < 10; i++) {  if (i % 2) {alert( i );  }}Цикл, который обрабатывает только нечётные значения, мог бы выглядеть так:

задача :
let a = 1, b = 1;
let c = ++a;                 // ?  a = 2, c = 2    префиксная форма возвращает новое значение
let d = b++;                 // ?    b = 2, d = 1  постфиксная форма возвращает старое значение

задача
alert( 2 > 1 );  // true (верно)
alert( 2 == 1 ); // false (неверно)
alert( 2 != 1 ); // true (верно)

задача
let a = 0;
alert( Boolean(a) ); // false
let b = "0";
alert( Boolean(b) ); // true
alert(a == b); // true!

задача
null == "\n0\n" → false
null === +"\n0\n" → false

задача
let result = условие ? значение1 : значение2; ..let accessAllowed(доступ разрешен) = (age > 18) ? true : false;

задача
способ 1
let age = prompt('Возраст?', 18);

let message = (age < 3) ? 'Здравствуй, малыш!' :
  (age < 18) ? 'Привет!' :
  (age < 100) ? 'Здравствуйте!' :
  'Какой необычный возраст!';
alert( message );

способ 2

if (age < 3) {
  message = 'Здравствуй, малыш!';
} else if (age < 18) {
  message = 'Привет!';
} else if (age < 100) {
  message = 'Здравствуйте!';
} else {
  message = 'Какой необычный возраст!';
}

задача
"" + 1 + 0 = "10" // (1)     //Сложение со строкой "" + 1 преобразует 1 к строке: "" + 1 = "1", и в следующем случае "1" + 0 работает то же самое правило.
"" - 1 + 0 = -1 // (2)      // Вычитание - (как и большинство математических операторов) работает только с числами, пустая строка "" приводится к 0.
true + false = 1
6 / "3" = 2
"2" * "3" = 6
4 + 5 + "px" = "9px"
"$" + 4 + 5 = "$45"
"4" - 2 = 2
"4px" - 2 = NaN
"  -9  " + 5 = "  -9  5" // (3)
"  -9  " - 5 = -14 // (4)
null + 1 = 1 // (5)             //null становится 0 после численного преобразования. 
undefined + 1 = NaN // (6)    //undefined становится NaN после численного преобразования.
" \t \n" - 2 = -2 // (7)

задача
let result=(a+b<4)? 'Мало': 'Много';

if (a + b < 4) {
  result = 'Мало';
} else {
  result = 'Много';
}



задача
let message;
if (login == 'Сотрудник') {
  message = 'Привет';
} else if (login == 'Директор') {
  message = 'Здравствуйте';
} else if (login == '') {
  message = 'Нет логина';
} else {
  message = '';
}

конструкция ?
continue


класс себя принимает имя дату рождения
через консоль высчитывать его возрост 

тима   год